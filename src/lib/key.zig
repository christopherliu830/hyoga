const sdl = @import("sdl");

pub const Keymod = c_uint;

pub const Keycode = enum(u32) {
    unknown,
    @"return",
    escape,
    backspace,
    tab,
    space,
    exclaim,
    dblapostrophe,
    hash,
    dollar,
    percent,
    ampersand,
    apostrophe,
    leftparen,
    rightparen,
    asterisk,
    plus,
    comma,
    minus,
    period,
    slash,
    @"0",
    @"1",
    @"2",
    @"3",
    @"4",
    @"5",
    @"6",
    @"7",
    @"8",
    @"9",
    colon,
    semicolon,
    less,
    equals,
    greater,
    question,
    at,
    leftbracket,
    backslash,
    rightbracket,
    caret,
    underscore,
    grave,
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    t,
    u,
    v,
    w,
    x,
    y,
    z,
    leftbrace,
    pipe,
    rightbrace,
    tilde,
    delete,
    plusminus,
    capslock,
    f1,
    f2,
    f3,
    f4,
    f5,
    f6,
    f7,
    f8,
    f9,
    f10,
    f11,
    f12,
    printscreen,
    scrolllock,
    pause,
    insert,
    home,
    pageup,
    end,
    pagedown,
    right,
    left,
    down,
    up,
    numlockclear,
    kp_divide,
    kp_multiply,
    kp_minus,
    kp_plus,
    kp_enter,
    kp_1,
    kp_2,
    kp_3,
    kp_4,
    kp_5,
    kp_6,
    kp_7,
    kp_8,
    kp_9,
    kp_0,
    kp_period,
    application,
    power,
    kp_equals,
    f13,
    f14,
    f15,
    f16,
    f17,
    f18,
    f19,
    f20,
    f21,
    f22,
    f23,
    f24,
    execute,
    help,
    menu,
    select,
    stop,
    again,
    undo,
    cut,
    copy,
    paste,
    find,
    mute,
    volumeup,
    volumedown,
    kp_comma,
    kp_equalsas400,
    alterase,
    sysreq,
    cancel,
    clear,
    prior,
    return2,
    separator,
    out,
    oper,
    clearagain,
    crsel,
    exsel,
    kp_00,
    kp_000,
    thousandsseparator,
    decimalseparator,
    currencyunit,
    currencysubunit,
    kp_leftparen,
    kp_rightparen,
    kp_leftbrace,
    kp_rightbrace,
    kp_tab,
    kp_backspace,
    kp_a,
    kp_b,
    kp_c,
    kp_d,
    kp_e,
    kp_f,
    kp_xor,
    kp_power,
    kp_percent,
    kp_less,
    kp_greater,
    kp_ampersand,
    kp_dblampersand,
    kp_verticalbar,
    kp_dblverticalbar,
    kp_colon,
    kp_hash,
    kp_space,
    kp_at,
    kp_exclam,
    kp_memstore,
    kp_memrecall,
    kp_memclear,
    kp_memadd,
    kp_memsubtract,
    kp_memmultiply,
    kp_memdivide,
    kp_plusminus,
    kp_clear,
    kp_clearentry,
    kp_binary,
    kp_octal,
    kp_decimal,
    kp_hexadecimal,
    lctrl,
    lshift,
    lalt,
    lgui,
    rctrl,
    rshift,
    ralt,
    rgui,
    mode,
    sleep,
    wake,
    channel_increment,
    channel_decrement,
    media_play,
    media_pause,
    media_record,
    media_fast_forward,
    media_rewind,
    media_next_track,
    media_previous_track,
    media_stop,
    media_eject,
    media_play_pause,
    media_select,
    ac_new,
    ac_open,
    ac_close,
    ac_exit,
    ac_save,
    ac_print,
    ac_properties,
    ac_search,
    ac_home,
    ac_back,
    ac_forward,
    ac_stop,
    ac_refresh,
    ac_bookmarks,
    softleft,
    softright,
    call,
    endcall,
};

pub const MouseButton = enum(u8) {
    left, // m1
    right, // m2
    middle, // m3
    motion,
    wheel,
    _,
};

pub const mod_none = @as(c_uint, 0x0000);
pub const mod_lshift = @as(c_uint, 0x0001);
pub const mod_rshift = @as(c_uint, 0x0002);
pub const mod_lctrl = @as(c_uint, 0x0040);
pub const mod_rctrl = @as(c_uint, 0x0080);
pub const mod_lalt = @as(c_uint, 0x0100);
pub const mod_ralt = @as(c_uint, 0x0200);
pub const mod_lgui = @as(c_uint, 0x0400);
pub const mod_rgui = @as(c_uint, 0x0800);
pub const mod_num = @as(c_uint, 0x1000);
pub const mod_caps = @as(c_uint, 0x2000);
pub const mod_mode = @as(c_uint, 0x4000);
pub const mod_scroll = @as(c_uint, 0x8000);
pub const mod_ctrl = mod_lctrl | mod_rctrl;
pub const mod_shift = mod_lshift | mod_rshift;
pub const mod_alt = mod_lalt | mod_ralt;
pub const mod_gui = mod_lgui | mod_rgui;

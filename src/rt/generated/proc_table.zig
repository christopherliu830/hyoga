/// Hyoga generated file.
const std = @import("std");
const hy = @import("hyoga");
const hym = hy.math;
pub const ProcTable = extern struct {
    hy_init: *const fn () callconv(.c) *hy.Engine,
    hy_engine_gameAllocator: *const fn (engine: *hy.Engine) callconv(.c) hy.ExternAllocator,
    hy_engine_gpu: *const fn (engine: *hy.Engine) callconv(.c) *hy.gfx.Gpu,
    hy_engine_input: *const fn (engine: *hy.Engine) callconv(.c) *hy.input.Context,
    hy_engine_phys2: *const fn (engine: *hy.Engine) callconv(.c) *hy.p2.Context,
    hy_engine_ui: *const fn (engine: *hy.Engine) callconv(.c) *hy.UI,
    hy_engine_window: *const fn (engine: *hy.Engine) callconv(.c) *hy.Window,
    hy_audio_soundRead: *const fn (path: hy.ExternSliceConst(u8)) callconv(.c) hy.Audio.Sound,
    hy_audio_soundPlay: *const fn (sound: *hy.Audio.Sound) callconv(.c) void,
    hy_audio_soundStop: *const fn (sound: *hy.Audio.Sound) callconv(.c) void,
    hy_gfx_clearColorSet: *const fn (gpu: *hy.gfx.Gpu, color: hym.Vec4) callconv(.c) void,
    hy_gfx_modelImport: *const fn (gpu: *hy.gfx.Gpu, path: hy.ExternSliceConst(u8), settings: hy.gfx.ImportSettings) callconv(.c) hy.gfx.Model,
    hy_gfx_modelCreate: *const fn (gpu: *hy.gfx.Gpu, opts: hy.gfx.ModelCreateOptions) callconv(.c) hy.gfx.Model,
    hy_gfx_modelDupe: *const fn (gpu: *hy.gfx.Gpu, original_model: hy.gfx.Model, options: hy.gfx.ModelDupeOptions) callconv(.c) hy.gfx.Model,
    hy_gfx_modelDestroy: *const fn (gpu: *hy.gfx.Gpu, model: hy.gfx.Model) callconv(.c) void,
    hy_gfx_modelBounds: *const fn (gpu: *hy.gfx.Gpu, model: hy.gfx.Model) callconv(.c) hym.AxisAligned,
    hy_gfx_modelPrimitive: *const fn (gpu: *hy.gfx.Gpu, shape: hy.gfx.PrimitiveShape) callconv(.c) hy.gfx.Model,
    hy_gfx_modelMaterial: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.Model) callconv(.c) hy.gfx.MaterialHandle,
    hy_gfx_modelWaitLoad: *const fn (gpu: *hy.gfx.Gpu, model: hy.gfx.Model, max: u64) callconv(.c) bool,
    hy_gfx_materialLoad: *const fn (gpu: *hy.gfx.Gpu, path: hy.ExternSliceConst(u8)) callconv(.c) hy.gfx.MaterialHandle,
    hy_gfx_materialReload: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.MaterialHandle) callconv(.c) void,
    hy_gfx_materialCreate: *const fn (gpu: *hy.gfx.Gpu, opts: hy.gfx.MaterialCreateOptions) callconv(.c) hy.gfx.MaterialHandle,
    hy_gfx_materialDupe: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.MaterialHandle) callconv(.c) hy.gfx.MaterialHandle,
    hy_gfx_materialDestroy: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.MaterialHandle) callconv(.c) void,
    hy_gfx_renderableAdd: *const fn (gpu: *hy.gfx.Gpu, options: hy.gfx.AddRenderableOptions) callconv(.c) hy.gfx.Renderable,
    hy_gfx_renderableRemove: *const fn (gpu: *hy.gfx.Gpu, item: hy.gfx.Renderable) callconv(.c) void,
    hy_gfx_renderableTransformSet: *const fn (gpu: *hy.gfx.Gpu, item: hy.gfx.Renderable, transform: hym.Mat4) callconv(.c) void,
    hy_gfx_spriteCreate: *const fn (gpu: *hy.gfx.Gpu, opts: hy.gfx.SpriteCreateOptions) callconv(.c) hy.gfx.Model,
    hy_gfx_spriteDestroy: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.Model) callconv(.c) void,
    hy_gfx_spriteWeakPtr: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.Sprite.Handle) callconv(.c) ?*hy.gfx.Sprite,
    hy_gfx_spriteRenderableWeakPtr: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.Renderable) callconv(.c) ?*hy.gfx.Sprite,
    hy_gfx_spriteCurrentAnimationFrame: *const fn (gpu: *hy.gfx.Gpu, sprite: *hy.gfx.Sprite) callconv(.c) u32,
    hy_gfx_spriteDupe: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.Model) callconv(.c) hy.gfx.Model,
    hy_gfx_textureImport: *const fn (gpu: *hy.gfx.Gpu, path: hy.ExternSliceConst(u8)) callconv(.c) hy.gfx.TextureHandle,
    hy_gfx_passCreate: *const fn (gpu: *hy.gfx.Gpu, opts: hy.gfx.PassCreateOptions) callconv(.c) hy.gfx.PassIndex,
    hy_gfx_passDestroy: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.PassIndex) callconv(.c) void,
    hy_gfx_passAdd: *const fn (gpu: *hy.gfx.Gpu, opts: hy.gfx.PassAddOptions) callconv(.c) hy.gfx.Renderable,
    hy_gfx_passClear: *const fn (gpu: *hy.gfx.Gpu, hdl: hy.gfx.PassIndex) callconv(.c) void,
    hy_gfx_immediateDraw: *const fn (gpu: *hy.gfx.Gpu, verts: hy.ExternSliceConst(hy.gfx.UIVertex), indices: hy.ExternSliceConst(u32), transform: hym.Mat4, material_hdl: hy.gfx.MaterialHandle) callconv(.c) void,
    hy_gfx_immediateText: *const fn (
        gpu: *hy.gfx.Gpu,
        glyphs: hy.ExternSliceConst(u8),
        transform: hym.Mat4,
        color: u32,
    ) callconv(.c) void,
    hy_io_reset: *const fn (input: *hy.input.Context) callconv(.c) void,
    hy_io_mouse: *const fn (input: *hy.input.Context, button: hy.key.MouseButton) callconv(.c) bool,
    hy_io_mousePosition: *const fn (input: *hy.input.Context) callconv(.c) hym.Vec2,
    hy_io_key: *const fn (input: *hy.input.Context, button: hy.key.Keycode) callconv(.c) bool,
    hy_io_bindPoll: *const fn (input: *hy.input.Context, id: u32, on: hy.input.OnFlags, button: hy.key.Keycode) callconv(.c) void,
    hy_io_bindPollMouse: *const fn (input: *hy.input.Context, id: u32, on: hy.input.OnFlags, mouse: hy.MouseButton) callconv(.c) void,
    hy_io_eventPump: *const fn (input: *hy.input.Context) callconv(.c) hy.ExternSliceConst(u32),
    hy_io_eventClear: *const fn (input: *hy.input.Context, events: hy.ExternSliceConst(u32)) callconv(.c) void,
    hy_p2_reset: *const fn (p2_ctx: *hy.p2.Context) callconv(.c) void,
    hy_p2_bodyAdd: *const fn (p2_ctx: *hy.p2.Context, opts: *const hy.p2.BodyAddOptions) callconv(.c) hy.p2.Body,
    hy_p2_bodyValid: *const fn (body: hy.p2.Body) callconv(.c) bool,
    hy_p2_bodyShapeAdd: *const fn (body: hy.p2.Body, opts: *const hy.p2.BodyAddOptions.ShapeOptions) callconv(.c) void,
    hy_p2_bodyDestroy: *const fn (body: hy.p2.Body) callconv(.c) void,
    hy_p2_bodyUserData: *const fn (body: hy.p2.Body) callconv(.c) ?*anyopaque,
    hy_p2_bodyUserDataSet: *const fn (body: hy.p2.Body, user_data: ?*anyopaque) callconv(.c) void,
    hy_p2_bodyPosition: *const fn (p2_ctx: *hy.p2.Context, body: hy.p2.Body) callconv(.c) hym.Vec2,
    hy_p2_bodyPositionSet: *const fn (body: hy.p2.Body, pos: hym.Vec2) callconv(.c) void,
    hy_p2_bodyPositionReal: *const fn (body: hy.p2.Body) callconv(.c) hym.Vec2,
    hy_p2_bodyType: *const fn (body: hy.p2.Body) callconv(.c) hy.p2.Body.Type,
    hy_p2_bodyTypeSet: *const fn (body: hy.p2.Body, body_type: hy.p2.Body.Type) callconv(.c) void,
    hy_p2_bodyVelocity: *const fn (body: hy.p2.Body) callconv(.c) hym.Vec2,
    hy_p2_bodyVelocitySet: *const fn (body: hy.p2.Body, velocity: hym.Vec2) callconv(.c) void,
    hy_p2_shapeExtra: *const fn (shape: hy.p2.Shape) callconv(.c) hy.p2.ShapeExtra,
    hy_p2_eventPump: *const fn (p2_ctx: *hy.p2.Context, buffer: hy.ExternSlice(hy.p2.Event)) callconv(.c) u32,
    hy_p2_overlapLeaky: *const fn (p2_ctx: *hy.p2.Context, arena: hy.ExternAllocator, shape: *const hy.p2.ShapeConfig, origin: hym.Vec2) callconv(.c) hy.ExternSlice(hy.p2.Shape),
    hy_p2_castRayLeaky: *const fn (p2_ctx: *hy.p2.Context, arena: hy.ExternAllocator, opts: hy.p2.RaycastOptions) callconv(.c) hy.ExternSlice(hy.p2.RaycastHit),
    hy_p2_castCircleLeaky: *const fn (p2_ctx: *hy.p2.Context, arena: hy.ExternAllocator, opts: hy.p2.CastCircleOptions) callconv(.c) hy.ExternSlice(hy.p2.RaycastHit),
    hy_p2_shapeBody: *const fn (shape: hy.p2.Shape) callconv(.c) hy.p2.Body,
    hy_p2_shapeValid: *const fn (shape: hy.p2.Shape) callconv(.c) bool,
    hy_ui_globalState: *const fn (ui: *hy.UI) callconv(.c) hy.ui.State,
    hy_ui_inputState: *const fn (ui: *hy.UI) callconv(.c) hy.ui.InputState,
    hy_win_relativeMouseMode: *const fn (window: *hy.Window, on_off: bool) callconv(.c) void,
    hy_win_dimensions: *const fn (window: *hy.Window) callconv(.c) hym.Vec2,
    hy_win_projectionMatrix: *const fn (window: *hy.Window) callconv(.c) hym.Mat4,
};

const root = @import("../root.zig");
pub const table: ProcTable = .{
    .hy_init = root.hy_init,
    .hy_engine_gameAllocator = root.hy_engine_gameAllocator,
    .hy_engine_gpu = root.hy_engine_gpu,
    .hy_engine_input = root.hy_engine_input,
    .hy_engine_phys2 = root.hy_engine_phys2,
    .hy_engine_ui = root.hy_engine_ui,
    .hy_engine_window = root.hy_engine_window,
    .hy_audio_soundRead = root.hy_audio_soundRead,
    .hy_audio_soundPlay = root.hy_audio_soundPlay,
    .hy_audio_soundStop = root.hy_audio_soundStop,
    .hy_gfx_clearColorSet = root.hy_gfx_clearColorSet,
    .hy_gfx_modelImport = root.hy_gfx_modelImport,
    .hy_gfx_modelCreate = root.hy_gfx_modelCreate,
    .hy_gfx_modelDupe = root.hy_gfx_modelDupe,
    .hy_gfx_modelDestroy = root.hy_gfx_modelDestroy,
    .hy_gfx_modelBounds = root.hy_gfx_modelBounds,
    .hy_gfx_modelPrimitive = root.hy_gfx_modelPrimitive,
    .hy_gfx_modelMaterial = root.hy_gfx_modelMaterial,
    .hy_gfx_modelWaitLoad = root.hy_gfx_modelWaitLoad,
    .hy_gfx_materialLoad = root.hy_gfx_materialLoad,
    .hy_gfx_materialReload = root.hy_gfx_materialReload,
    .hy_gfx_materialCreate = root.hy_gfx_materialCreate,
    .hy_gfx_materialDupe = root.hy_gfx_materialDupe,
    .hy_gfx_materialDestroy = root.hy_gfx_materialDestroy,
    .hy_gfx_renderableAdd = root.hy_gfx_renderableAdd,
    .hy_gfx_renderableRemove = root.hy_gfx_renderableRemove,
    .hy_gfx_renderableTransformSet = root.hy_gfx_renderableTransformSet,
    .hy_gfx_spriteCreate = root.hy_gfx_spriteCreate,
    .hy_gfx_spriteDestroy = root.hy_gfx_spriteDestroy,
    .hy_gfx_spriteWeakPtr = root.hy_gfx_spriteWeakPtr,
    .hy_gfx_spriteRenderableWeakPtr = root.hy_gfx_spriteRenderableWeakPtr,
    .hy_gfx_spriteCurrentAnimationFrame = root.hy_gfx_spriteCurrentAnimationFrame,
    .hy_gfx_spriteDupe = root.hy_gfx_spriteDupe,
    .hy_gfx_textureImport = root.hy_gfx_textureImport,
    .hy_gfx_passCreate = root.hy_gfx_passCreate,
    .hy_gfx_passDestroy = root.hy_gfx_passDestroy,
    .hy_gfx_passAdd = root.hy_gfx_passAdd,
    .hy_gfx_passClear = root.hy_gfx_passClear,
    .hy_gfx_immediateDraw = root.hy_gfx_immediateDraw,
    .hy_gfx_immediateText = root.hy_gfx_immediateText,
    .hy_io_reset = root.hy_io_reset,
    .hy_io_mouse = root.hy_io_mouse,
    .hy_io_mousePosition = root.hy_io_mousePosition,
    .hy_io_key = root.hy_io_key,
    .hy_io_bindPoll = root.hy_io_bindPoll,
    .hy_io_bindPollMouse = root.hy_io_bindPollMouse,
    .hy_io_eventPump = root.hy_io_eventPump,
    .hy_io_eventClear = root.hy_io_eventClear,
    .hy_p2_reset = root.hy_p2_reset,
    .hy_p2_bodyAdd = root.hy_p2_bodyAdd,
    .hy_p2_bodyValid = root.hy_p2_bodyValid,
    .hy_p2_bodyShapeAdd = root.hy_p2_bodyShapeAdd,
    .hy_p2_bodyDestroy = root.hy_p2_bodyDestroy,
    .hy_p2_bodyUserData = root.hy_p2_bodyUserData,
    .hy_p2_bodyUserDataSet = root.hy_p2_bodyUserDataSet,
    .hy_p2_bodyPosition = root.hy_p2_bodyPosition,
    .hy_p2_bodyPositionSet = root.hy_p2_bodyPositionSet,
    .hy_p2_bodyPositionReal = root.hy_p2_bodyPositionReal,
    .hy_p2_bodyType = root.hy_p2_bodyType,
    .hy_p2_bodyTypeSet = root.hy_p2_bodyTypeSet,
    .hy_p2_bodyVelocity = root.hy_p2_bodyVelocity,
    .hy_p2_bodyVelocitySet = root.hy_p2_bodyVelocitySet,
    .hy_p2_shapeExtra = root.hy_p2_shapeExtra,
    .hy_p2_eventPump = root.hy_p2_eventPump,
    .hy_p2_overlapLeaky = root.hy_p2_overlapLeaky,
    .hy_p2_castRayLeaky = root.hy_p2_castRayLeaky,
    .hy_p2_castCircleLeaky = root.hy_p2_castCircleLeaky,
    .hy_p2_shapeBody = root.hy_p2_shapeBody,
    .hy_p2_shapeValid = root.hy_p2_shapeValid,
    .hy_ui_globalState = root.hy_ui_globalState,
    .hy_ui_inputState = root.hy_ui_inputState,
    .hy_win_relativeMouseMode = root.hy_win_relativeMouseMode,
    .hy_win_dimensions = root.hy_win_dimensions,
    .hy_win_projectionMatrix = root.hy_win_projectionMatrix,
};

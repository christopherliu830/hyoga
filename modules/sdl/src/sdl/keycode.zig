pub const Keycode = u32;
pub const Keymod = u16;

pub const unknown = @as(c_uint, 0x00000000);
pub const @"return" = @as(c_uint, 0x0000000d);
pub const escape = @as(c_uint, 0x0000001b);
pub const backspace = @as(c_uint, 0x00000008);
pub const tab = @as(c_uint, 0x00000009);
pub const space = @as(c_uint, 0x00000020);
pub const exclaim = @as(c_uint, 0x00000021);
pub const dblapostrophe = @as(c_uint, 0x00000022);
pub const hash = @as(c_uint, 0x00000023);
pub const dollar = @as(c_uint, 0x00000024);
pub const percent = @as(c_uint, 0x00000025);
pub const ampersand = @as(c_uint, 0x00000026);
pub const apostrophe = @as(c_uint, 0x00000027);
pub const leftparen = @as(c_uint, 0x00000028);
pub const rightparen = @as(c_uint, 0x00000029);
pub const asterisk = @as(c_uint, 0x0000002a);
pub const plus = @as(c_uint, 0x0000002b);
pub const comma = @as(c_uint, 0x0000002c);
pub const minus = @as(c_uint, 0x0000002d);
pub const period = @as(c_uint, 0x0000002e);
pub const slash = @as(c_uint, 0x0000002f);
pub const @"0" = @as(c_uint, 0x00000030);
pub const @"1" = @as(c_uint, 0x00000031);
pub const @"2" = @as(c_uint, 0x00000032);
pub const @"3" = @as(c_uint, 0x00000033);
pub const @"4" = @as(c_uint, 0x00000034);
pub const @"5" = @as(c_uint, 0x00000035);
pub const @"6" = @as(c_uint, 0x00000036);
pub const @"7" = @as(c_uint, 0x00000037);
pub const @"8" = @as(c_uint, 0x00000038);
pub const @"9" = @as(c_uint, 0x00000039);
pub const colon = @as(c_uint, 0x0000003a);
pub const semicolon = @as(c_uint, 0x0000003b);
pub const less = @as(c_uint, 0x0000003c);
pub const equals = @as(c_uint, 0x0000003d);
pub const greater = @as(c_uint, 0x0000003e);
pub const question = @as(c_uint, 0x0000003f);
pub const at = @as(c_uint, 0x00000040);
pub const leftbracket = @as(c_uint, 0x0000005b);
pub const backslash = @as(c_uint, 0x0000005c);
pub const rightbracket = @as(c_uint, 0x0000005d);
pub const caret = @as(c_uint, 0x0000005e);
pub const underscore = @as(c_uint, 0x0000005f);
pub const grave = @as(c_uint, 0x00000060);
pub const a = @as(c_uint, 0x00000061);
pub const b = @as(c_uint, 0x00000062);
pub const c = @as(c_uint, 0x00000063);
pub const d = @as(c_uint, 0x00000064);
pub const e = @as(c_uint, 0x00000065);
pub const f = @as(c_uint, 0x00000066);
pub const g = @as(c_uint, 0x00000067);
pub const h = @as(c_uint, 0x00000068);
pub const i = @as(c_uint, 0x00000069);
pub const j = @as(c_uint, 0x0000006a);
pub const k = @as(c_uint, 0x0000006b);
pub const l = @as(c_uint, 0x0000006c);
pub const m = @as(c_uint, 0x0000006d);
pub const n = @as(c_uint, 0x0000006e);
pub const o = @as(c_uint, 0x0000006f);
pub const p = @as(c_uint, 0x00000070);
pub const q = @as(c_uint, 0x00000071);
pub const r = @as(c_uint, 0x00000072);
pub const s = @as(c_uint, 0x00000073);
pub const t = @as(c_uint, 0x00000074);
pub const u = @as(c_uint, 0x00000075);
pub const v = @as(c_uint, 0x00000076);
pub const w = @as(c_uint, 0x00000077);
pub const x = @as(c_uint, 0x00000078);
pub const y = @as(c_uint, 0x00000079);
pub const z = @as(c_uint, 0x0000007a);
pub const leftbrace = @as(c_uint, 0x0000007b);
pub const pipe = @as(c_uint, 0x0000007c);
pub const rightbrace = @as(c_uint, 0x0000007d);
pub const tilde = @as(c_uint, 0x0000007e);
pub const delete = @as(c_uint, 0x0000007f);
pub const plusminus = @as(c_uint, 0x000000b1);
pub const capslock = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000039, .hex);
pub const f1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003a, .hex);
pub const f2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003b, .hex);
pub const f3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003c, .hex);
pub const f4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003d, .hex);
pub const f5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003e, .hex);
pub const f6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000003f, .hex);
pub const f7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000040, .hex);
pub const f8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000041, .hex);
pub const f9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000042, .hex);
pub const f10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000043, .hex);
pub const f11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000044, .hex);
pub const f12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000045, .hex);
pub const printscreen = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000046, .hex);
pub const scrolllock = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000047, .hex);
pub const pause = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000048, .hex);
pub const insert = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000049, .hex);
pub const home = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000004a, .hex);
pub const pageup = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000004b, .hex);
pub const end = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000004d, .hex);
pub const pagedown = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000004e, .hex);
pub const right = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000004f, .hex);
pub const left = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000050, .hex);
pub const down = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000051, .hex);
pub const up = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000052, .hex);
pub const numlockclear = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000053, .hex);
pub const kp_divide = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000054, .hex);
pub const kp_multiply = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000055, .hex);
pub const kp_minus = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000056, .hex);
pub const kp_plus = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000057, .hex);
pub const kp_enter = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000058, .hex);
pub const kp_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000059, .hex);
pub const kp_2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005a, .hex);
pub const kp_3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005b, .hex);
pub const kp_4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005c, .hex);
pub const kp_5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005d, .hex);
pub const kp_6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005e, .hex);
pub const kp_7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000005f, .hex);
pub const kp_8 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000060, .hex);
pub const kp_9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000061, .hex);
pub const kp_0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000062, .hex);
pub const kp_period = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000063, .hex);
pub const application = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000065, .hex);
pub const power = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000066, .hex);
pub const kp_equals = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000067, .hex);
pub const f13 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000068, .hex);
pub const f14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000069, .hex);
pub const f15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006a, .hex);
pub const @"f16" = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006b, .hex);
pub const f17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006c, .hex);
pub const f18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006d, .hex);
pub const f19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006e, .hex);
pub const f20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000006f, .hex);
pub const f21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000070, .hex);
pub const f22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000071, .hex);
pub const f23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000072, .hex);
pub const f24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000073, .hex);
pub const execute = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000074, .hex);
pub const help = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000075, .hex);
pub const menu = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000076, .hex);
pub const select = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000077, .hex);
pub const stop = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000078, .hex);
pub const again = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000079, .hex);
pub const undo = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007a, .hex);
pub const cut = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007b, .hex);
pub const copy = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007c, .hex);
pub const paste = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007d, .hex);
pub const find = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007e, .hex);
pub const mute = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000007f, .hex);
pub const volumeup = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000080, .hex);
pub const volumedown = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000081, .hex);
pub const kp_comma = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000085, .hex);
pub const kp_equalsas400 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000086, .hex);
pub const alterase = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000099, .hex);
pub const sysreq = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009a, .hex);
pub const cancel = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009b, .hex);
pub const clear = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009c, .hex);
pub const prior = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009d, .hex);
pub const return2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009e, .hex);
pub const separator = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000009f, .hex);
pub const out = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000a0, .hex);
pub const oper = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000a1, .hex);
pub const clearagain = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000a2, .hex);
pub const crsel = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000a3, .hex);
pub const exsel = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000a4, .hex);
pub const kp_00 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b0, .hex);
pub const kp_000 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b1, .hex);
pub const thousandsseparator = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b2, .hex);
pub const decimalseparator = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b3, .hex);
pub const currencyunit = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b4, .hex);
pub const currencysubunit = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b5, .hex);
pub const kp_leftparen = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b6, .hex);
pub const kp_rightparen = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b7, .hex);
pub const kp_leftbrace = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b8, .hex);
pub const kp_rightbrace = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000b9, .hex);
pub const kp_tab = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000ba, .hex);
pub const kp_backspace = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000bb, .hex);
pub const kp_a = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000bc, .hex);
pub const kp_b = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000bd, .hex);
pub const kp_c = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000be, .hex);
pub const kp_d = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000bf, .hex);
pub const kp_e = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c0, .hex);
pub const kp_f = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c1, .hex);
pub const kp_xor = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c2, .hex);
pub const kp_power = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c3, .hex);
pub const kp_percent = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c4, .hex);
pub const kp_less = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c5, .hex);
pub const kp_greater = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c6, .hex);
pub const kp_ampersand = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c7, .hex);
pub const kp_dblampersand = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c8, .hex);
pub const kp_verticalbar = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000c9, .hex);
pub const kp_dblverticalbar = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000ca, .hex);
pub const kp_colon = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000cb, .hex);
pub const kp_hash = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000cc, .hex);
pub const kp_space = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000cd, .hex);
pub const kp_at = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000ce, .hex);
pub const kp_exclam = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000cf, .hex);
pub const kp_memstore = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d0, .hex);
pub const kp_memrecall = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d1, .hex);
pub const kp_memclear = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d2, .hex);
pub const kp_memadd = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d3, .hex);
pub const kp_memsubtract = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d4, .hex);
pub const kp_memmultiply = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d5, .hex);
pub const kp_memdivide = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d6, .hex);
pub const kp_plusminus = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d7, .hex);
pub const kp_clear = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d8, .hex);
pub const kp_clearentry = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000d9, .hex);
pub const kp_binary = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000da, .hex);
pub const kp_octal = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000db, .hex);
pub const kp_decimal = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000dc, .hex);
pub const kp_hexadecimal = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000dd, .hex);
pub const lctrl = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e0, .hex);
pub const lshift = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e1, .hex);
pub const lalt = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e2, .hex);
pub const lgui = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e3, .hex);
pub const rctrl = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e4, .hex);
pub const rshift = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e5, .hex);
pub const ralt = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e6, .hex);
pub const rgui = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x400000e7, .hex);
pub const mode = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000101, .hex);
pub const sleep = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000102, .hex);
pub const wake = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000103, .hex);
pub const channel_increment = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000104, .hex);
pub const channel_decrement = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000105, .hex);
pub const media_play = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000106, .hex);
pub const media_pause = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000107, .hex);
pub const media_record = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000108, .hex);
pub const media_fast_forward = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000109, .hex);
pub const media_rewind = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010a, .hex);
pub const media_next_track = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010b, .hex);
pub const media_previous_track = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010c, .hex);
pub const media_stop = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010d, .hex);
pub const media_eject = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010e, .hex);
pub const media_play_pause = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000010f, .hex);
pub const media_select = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000110, .hex);
pub const ac_new = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000111, .hex);
pub const ac_open = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000112, .hex);
pub const ac_close = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000113, .hex);
pub const ac_exit = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000114, .hex);
pub const ac_save = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000115, .hex);
pub const ac_print = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000116, .hex);
pub const ac_properties = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000117, .hex);
pub const ac_search = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000118, .hex);
pub const ac_home = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000119, .hex);
pub const ac_back = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011a, .hex);
pub const ac_forward = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011b, .hex);
pub const ac_stop = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011c, .hex);
pub const ac_refresh = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011d, .hex);
pub const ac_bookmarks = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011e, .hex);
pub const softleft = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x4000011f, .hex);
pub const softright = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000120, .hex);
pub const call = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000121, .hex);
pub const endcall = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000122, .hex);
pub const mod_none = @as(c_uint, 0x0000);
pub const mod_lshift = @as(c_uint, 0x0001);
pub const mod_rshift = @as(c_uint, 0x0002);
pub const mod_lctrl = @as(c_uint, 0x0040);
pub const mod_rctrl = @as(c_uint, 0x0080);
pub const mod_lalt = @as(c_uint, 0x0100);
pub const mod_ralt = @as(c_uint, 0x0200);
pub const mod_lgui = @as(c_uint, 0x0400);
pub const mod_rgui = @as(c_uint, 0x0800);
pub const mod_num = @as(c_uint, 0x1000);
pub const mod_caps = @as(c_uint, 0x2000);
pub const mod_mode = @as(c_uint, 0x4000);
pub const mod_scroll = @as(c_uint, 0x8000);
pub const mod_ctrl = mod_lctrl | mod_rctrl;
pub const mod_shift = mod_lshift | mod_rshift;
pub const mod_alt = mod_lalt | mod_ralt;
pub const mod_gui = mod_lgui | mod_rgui;
